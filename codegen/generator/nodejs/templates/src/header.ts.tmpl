{{ define "header" -}}
/**
 * This file was auto-generated by `cloak clientgen`.
 * Do not make direct changes to the file.
 */

import { GraphQLClient, gql } from "graphql-request";
import { queryBuilder, queryFlatten } from "./utils.js"

export type QueryTree = {
  operation: string
  args?: Record<string, any>
}

interface ClientConfig {
  queryTree?: QueryTree[],
  host?: string
}

class BaseClient {
  protected _queryTree:  QueryTree[]
	private client: GraphQLClient;
  protected _host: string


  constructor({queryTree, host}: ClientConfig = {}) {
    this._queryTree = queryTree || []
    this._host = host || "127.0.0.1:8080"
		this.client = new GraphQLClient(`http://${host}/query`);
  }

  get queryTree() {
    return this._queryTree;
  }

  protected async _compute() : Promise<Record<string, any>> {
    try {
      // run the query and return the result.
      const query = queryBuilder(this._queryTree)
      const computeQuery: Awaited<Promise<Record<string, any>>> =  await this.client.request(gql`${query}`)
    
      return queryFlatten(computeQuery)
    } catch (error) {
      console.error(JSON.stringify(error, undefined, 2))
      return {}
    }
  }
}
{{- end }}
